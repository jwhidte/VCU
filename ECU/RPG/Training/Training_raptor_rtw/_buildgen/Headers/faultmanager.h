/*****************************************************************************
   faultmanager.h
   Generated By:
   Raptor 2022b_1.0.14751 (6897)
   Matlab (R2022b) 9.13

   Copyright (c) 2018 New Eagle Products, Inc.
   All rights reserved.

   Code Generated at: Mon Jan 30 16:09:40 2023
 *****************************************************************************/

#ifndef __FAULTMANAGER_H
#define __FAULTMANAGER_H
#include "rtwtypes.h"
#define FAULT_NOTOCCURRED_MASK         0x01U
#define FAULT_SUSPECTED_MASK           0x02U
#define FAULT_ACTIVE_MASK              0x04U
#define FAULT_OCCURRED_MASK            0x08U
#define FAULT_ACTIVEATSHUTDOWN_MASK    0x10U

typedef enum {
  FAULT_NONE = 0,
  FAULT_NOTOCCURRED = 1,
  FAULT_SUSPECTED = 2,
  FAULT_ACTIVE = 4,
  FAULT_OCCURRED = 8,
  FAULT_ACTIVEATSHUTDOWN = 16,
  FAULT_CLEAR = 32,
} E_FaultState;

typedef enum {
  FLTEVT_NONE = 0x00,
  FLTEVT_RISENOTOCCURRED = 0x01,
  FLTEVT_FALLNOTOCCURRED = 0x02,
  FLTEVT_RISESUSPECTED = 0x04,
  FLTEVT_FALLSUSPECTED = 0x08,
  FLTEVT_RISEACTIVE = 0x10,
  FLTEVT_FALLACTIVE = 0x20,
  FLTEVT_RISEOCCURRED = 0x40,
  FLTEVT_FALLOCCURRED = 0x80,
} E_FaultEvent;

typedef enum {
  FLTOP_NOTHING,
  FLTOP_FALSE,
  FLTOP_TRUE,
} E_FaultOperation;

#ifndef FM_UNUSED
#define FM_UNUSED(x)                   (void)x
#endif                                 /* FM_UNUSED */

void updateFaultInput(int16_T faultIdx, boolean_T inSample, uint32_T xLimit,
                      uint32_T yLimit, boolean_T sticky);
void initFaultManager(void);
void clearFaults(void);
void clearFault(int16_T faultIdx);
boolean_T getFaultState(int16_T faultIdx, E_FaultState state);
int16_T getNextFaultByAction(int16_T action, int16_T startIdx);
int16_T getNextFaultByState(E_FaultState state, boolean_T onlyEmissRelated,
  int16_T startIdx);
int16_T getNextFault(int16_T startIdx);
uint16_T getFaultStateCount(E_FaultState state);
void setOccurredState(int16_T faultIdx, boolean_T nextValue);
void setActiveState(int16_T faultIdx, boolean_T nextValue);
void setSuspectedState(int16_T faultIdx, boolean_T nextValue);
void setActiveAtShutdownState(int16_T faultIdx, boolean_T nextValue);
boolean_T getFaultActionState(int16_T action);
boolean_T getFaultPersistent(int16_T faultIdx);
E_FaultOperation getFaultOperation(int16_T faultIdx);

/* Fault Idx, Fault Name, X Limit Initial Value, Y Limit Initial Value
   1	APP_InputHi 25U 50U
   2	APP_InputLow 25U 50U
   3	TPS_InputHi 25U 50U
   4	TPS_InputLow 25U 50U
 */
#endif
